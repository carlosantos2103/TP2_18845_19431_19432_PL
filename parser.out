Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     command -> FORWARD value
Rule 4     command -> FD value
Rule 5     command -> BACK value
Rule 6     command -> BK value
Rule 7     command -> LT value
Rule 8     command -> LEFT value
Rule 9     command -> RT value
Rule 10    command -> RIGHT value
Rule 11    command -> SETPOS [ value value ]
Rule 12    command -> SETXY value value
Rule 13    command -> SETX value
Rule 14    command -> SETY value
Rule 15    command -> HOME
Rule 16    command -> PD
Rule 17    command -> PENDOWN
Rule 18    command -> PU
Rule 19    command -> PENUP
Rule 20    command -> SETPENCOLOR [ value value value ]
Rule 21    command -> MAKE VARNAME value
Rule 22    command -> IF condition [ program ]
Rule 23    command -> IFELSE condition [ program ] [ program ]
Rule 24    command -> REPEAT value [ program ]
Rule 25    command -> WHILE [ condition ] [ program ]
Rule 26    command -> WHILE condition [ program ]
Rule 27    command -> TO NAMETO program END
Rule 28    command -> TO NAMETO vars program END
Rule 29    command -> NAMETO
Rule 30    command -> NAMETO values
Rule 31    value -> NUM
Rule 32    value -> VARUSE
Rule 33    value -> VARUSE OPERATOR NUM
Rule 34    value -> NUM OPERATOR VARUSE
Rule 35    value -> NUM OPERATOR NUM
Rule 36    value -> VARUSE OPERATOR VARUSE
Rule 37    values -> value
Rule 38    values -> values value
Rule 39    condition -> value
Rule 40    condition -> value LOGIC value
Rule 41    vars -> VARUSE
Rule 42    vars -> vars VARUSE

Terminals, with rules where they appear

BACK                 : 5
BK                   : 6
END                  : 27 28
FD                   : 4
FORWARD              : 3
HOME                 : 15
IF                   : 22
IFELSE               : 23
LEFT                 : 8
LOGIC                : 40
LT                   : 7
MAKE                 : 21
NAMETO               : 27 28 29 30
NUM                  : 31 33 34 35 35
OPERATOR             : 33 34 35 36
PD                   : 16
PENDOWN              : 17
PENUP                : 19
PU                   : 18
REPEAT               : 24
RIGHT                : 10
RT                   : 9
SETPENCOLOR          : 20
SETPOS               : 11
SETX                 : 13
SETXY                : 12
SETY                 : 14
TO                   : 27 28
VARNAME              : 21
VARUSE               : 32 33 34 36 36 41 42
WHILE                : 25 26
[                    : 11 20 22 23 23 24 25 25 26
]                    : 11 20 22 23 23 24 25 25 26
error                : 

Nonterminals, with rules where they appear

command              : 1 2
condition            : 22 23 25 26
program              : 2 22 23 23 24 25 26 27 28 0
value                : 3 4 5 6 7 8 9 10 11 11 12 12 13 14 20 20 20 21 24 37 38 39 40 40
values               : 30 38
vars                 : 28 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 2

    (1) program -> command .

    FORWARD         reduce using rule 1 (program -> command .)
    FD              reduce using rule 1 (program -> command .)
    BACK            reduce using rule 1 (program -> command .)
    BK              reduce using rule 1 (program -> command .)
    LT              reduce using rule 1 (program -> command .)
    LEFT            reduce using rule 1 (program -> command .)
    RT              reduce using rule 1 (program -> command .)
    RIGHT           reduce using rule 1 (program -> command .)
    SETPOS          reduce using rule 1 (program -> command .)
    SETXY           reduce using rule 1 (program -> command .)
    SETX            reduce using rule 1 (program -> command .)
    SETY            reduce using rule 1 (program -> command .)
    HOME            reduce using rule 1 (program -> command .)
    PD              reduce using rule 1 (program -> command .)
    PENDOWN         reduce using rule 1 (program -> command .)
    PU              reduce using rule 1 (program -> command .)
    PENUP           reduce using rule 1 (program -> command .)
    SETPENCOLOR     reduce using rule 1 (program -> command .)
    MAKE            reduce using rule 1 (program -> command .)
    IF              reduce using rule 1 (program -> command .)
    IFELSE          reduce using rule 1 (program -> command .)
    REPEAT          reduce using rule 1 (program -> command .)
    WHILE           reduce using rule 1 (program -> command .)
    TO              reduce using rule 1 (program -> command .)
    NAMETO          reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)
    END             reduce using rule 1 (program -> command .)
    ]               reduce using rule 1 (program -> command .)


state 3

    (3) command -> FORWARD . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 29

state 4

    (4) command -> FD . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 32

state 5

    (5) command -> BACK . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 33

state 6

    (6) command -> BK . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 34

state 7

    (7) command -> LT . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 35

state 8

    (8) command -> LEFT . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 36

state 9

    (9) command -> RT . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 37

state 10

    (10) command -> RIGHT . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 38

state 11

    (11) command -> SETPOS . [ value value ]

    [               shift and go to state 39


state 12

    (12) command -> SETXY . value value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 40

state 13

    (13) command -> SETX . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 41

state 14

    (14) command -> SETY . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 42

state 15

    (15) command -> HOME .

    FORWARD         reduce using rule 15 (command -> HOME .)
    FD              reduce using rule 15 (command -> HOME .)
    BACK            reduce using rule 15 (command -> HOME .)
    BK              reduce using rule 15 (command -> HOME .)
    LT              reduce using rule 15 (command -> HOME .)
    LEFT            reduce using rule 15 (command -> HOME .)
    RT              reduce using rule 15 (command -> HOME .)
    RIGHT           reduce using rule 15 (command -> HOME .)
    SETPOS          reduce using rule 15 (command -> HOME .)
    SETXY           reduce using rule 15 (command -> HOME .)
    SETX            reduce using rule 15 (command -> HOME .)
    SETY            reduce using rule 15 (command -> HOME .)
    HOME            reduce using rule 15 (command -> HOME .)
    PD              reduce using rule 15 (command -> HOME .)
    PENDOWN         reduce using rule 15 (command -> HOME .)
    PU              reduce using rule 15 (command -> HOME .)
    PENUP           reduce using rule 15 (command -> HOME .)
    SETPENCOLOR     reduce using rule 15 (command -> HOME .)
    MAKE            reduce using rule 15 (command -> HOME .)
    IF              reduce using rule 15 (command -> HOME .)
    IFELSE          reduce using rule 15 (command -> HOME .)
    REPEAT          reduce using rule 15 (command -> HOME .)
    WHILE           reduce using rule 15 (command -> HOME .)
    TO              reduce using rule 15 (command -> HOME .)
    NAMETO          reduce using rule 15 (command -> HOME .)
    $end            reduce using rule 15 (command -> HOME .)
    END             reduce using rule 15 (command -> HOME .)
    ]               reduce using rule 15 (command -> HOME .)


state 16

    (16) command -> PD .

    FORWARD         reduce using rule 16 (command -> PD .)
    FD              reduce using rule 16 (command -> PD .)
    BACK            reduce using rule 16 (command -> PD .)
    BK              reduce using rule 16 (command -> PD .)
    LT              reduce using rule 16 (command -> PD .)
    LEFT            reduce using rule 16 (command -> PD .)
    RT              reduce using rule 16 (command -> PD .)
    RIGHT           reduce using rule 16 (command -> PD .)
    SETPOS          reduce using rule 16 (command -> PD .)
    SETXY           reduce using rule 16 (command -> PD .)
    SETX            reduce using rule 16 (command -> PD .)
    SETY            reduce using rule 16 (command -> PD .)
    HOME            reduce using rule 16 (command -> PD .)
    PD              reduce using rule 16 (command -> PD .)
    PENDOWN         reduce using rule 16 (command -> PD .)
    PU              reduce using rule 16 (command -> PD .)
    PENUP           reduce using rule 16 (command -> PD .)
    SETPENCOLOR     reduce using rule 16 (command -> PD .)
    MAKE            reduce using rule 16 (command -> PD .)
    IF              reduce using rule 16 (command -> PD .)
    IFELSE          reduce using rule 16 (command -> PD .)
    REPEAT          reduce using rule 16 (command -> PD .)
    WHILE           reduce using rule 16 (command -> PD .)
    TO              reduce using rule 16 (command -> PD .)
    NAMETO          reduce using rule 16 (command -> PD .)
    $end            reduce using rule 16 (command -> PD .)
    END             reduce using rule 16 (command -> PD .)
    ]               reduce using rule 16 (command -> PD .)


state 17

    (17) command -> PENDOWN .

    FORWARD         reduce using rule 17 (command -> PENDOWN .)
    FD              reduce using rule 17 (command -> PENDOWN .)
    BACK            reduce using rule 17 (command -> PENDOWN .)
    BK              reduce using rule 17 (command -> PENDOWN .)
    LT              reduce using rule 17 (command -> PENDOWN .)
    LEFT            reduce using rule 17 (command -> PENDOWN .)
    RT              reduce using rule 17 (command -> PENDOWN .)
    RIGHT           reduce using rule 17 (command -> PENDOWN .)
    SETPOS          reduce using rule 17 (command -> PENDOWN .)
    SETXY           reduce using rule 17 (command -> PENDOWN .)
    SETX            reduce using rule 17 (command -> PENDOWN .)
    SETY            reduce using rule 17 (command -> PENDOWN .)
    HOME            reduce using rule 17 (command -> PENDOWN .)
    PD              reduce using rule 17 (command -> PENDOWN .)
    PENDOWN         reduce using rule 17 (command -> PENDOWN .)
    PU              reduce using rule 17 (command -> PENDOWN .)
    PENUP           reduce using rule 17 (command -> PENDOWN .)
    SETPENCOLOR     reduce using rule 17 (command -> PENDOWN .)
    MAKE            reduce using rule 17 (command -> PENDOWN .)
    IF              reduce using rule 17 (command -> PENDOWN .)
    IFELSE          reduce using rule 17 (command -> PENDOWN .)
    REPEAT          reduce using rule 17 (command -> PENDOWN .)
    WHILE           reduce using rule 17 (command -> PENDOWN .)
    TO              reduce using rule 17 (command -> PENDOWN .)
    NAMETO          reduce using rule 17 (command -> PENDOWN .)
    $end            reduce using rule 17 (command -> PENDOWN .)
    END             reduce using rule 17 (command -> PENDOWN .)
    ]               reduce using rule 17 (command -> PENDOWN .)


state 18

    (18) command -> PU .

    FORWARD         reduce using rule 18 (command -> PU .)
    FD              reduce using rule 18 (command -> PU .)
    BACK            reduce using rule 18 (command -> PU .)
    BK              reduce using rule 18 (command -> PU .)
    LT              reduce using rule 18 (command -> PU .)
    LEFT            reduce using rule 18 (command -> PU .)
    RT              reduce using rule 18 (command -> PU .)
    RIGHT           reduce using rule 18 (command -> PU .)
    SETPOS          reduce using rule 18 (command -> PU .)
    SETXY           reduce using rule 18 (command -> PU .)
    SETX            reduce using rule 18 (command -> PU .)
    SETY            reduce using rule 18 (command -> PU .)
    HOME            reduce using rule 18 (command -> PU .)
    PD              reduce using rule 18 (command -> PU .)
    PENDOWN         reduce using rule 18 (command -> PU .)
    PU              reduce using rule 18 (command -> PU .)
    PENUP           reduce using rule 18 (command -> PU .)
    SETPENCOLOR     reduce using rule 18 (command -> PU .)
    MAKE            reduce using rule 18 (command -> PU .)
    IF              reduce using rule 18 (command -> PU .)
    IFELSE          reduce using rule 18 (command -> PU .)
    REPEAT          reduce using rule 18 (command -> PU .)
    WHILE           reduce using rule 18 (command -> PU .)
    TO              reduce using rule 18 (command -> PU .)
    NAMETO          reduce using rule 18 (command -> PU .)
    $end            reduce using rule 18 (command -> PU .)
    END             reduce using rule 18 (command -> PU .)
    ]               reduce using rule 18 (command -> PU .)


state 19

    (19) command -> PENUP .

    FORWARD         reduce using rule 19 (command -> PENUP .)
    FD              reduce using rule 19 (command -> PENUP .)
    BACK            reduce using rule 19 (command -> PENUP .)
    BK              reduce using rule 19 (command -> PENUP .)
    LT              reduce using rule 19 (command -> PENUP .)
    LEFT            reduce using rule 19 (command -> PENUP .)
    RT              reduce using rule 19 (command -> PENUP .)
    RIGHT           reduce using rule 19 (command -> PENUP .)
    SETPOS          reduce using rule 19 (command -> PENUP .)
    SETXY           reduce using rule 19 (command -> PENUP .)
    SETX            reduce using rule 19 (command -> PENUP .)
    SETY            reduce using rule 19 (command -> PENUP .)
    HOME            reduce using rule 19 (command -> PENUP .)
    PD              reduce using rule 19 (command -> PENUP .)
    PENDOWN         reduce using rule 19 (command -> PENUP .)
    PU              reduce using rule 19 (command -> PENUP .)
    PENUP           reduce using rule 19 (command -> PENUP .)
    SETPENCOLOR     reduce using rule 19 (command -> PENUP .)
    MAKE            reduce using rule 19 (command -> PENUP .)
    IF              reduce using rule 19 (command -> PENUP .)
    IFELSE          reduce using rule 19 (command -> PENUP .)
    REPEAT          reduce using rule 19 (command -> PENUP .)
    WHILE           reduce using rule 19 (command -> PENUP .)
    TO              reduce using rule 19 (command -> PENUP .)
    NAMETO          reduce using rule 19 (command -> PENUP .)
    $end            reduce using rule 19 (command -> PENUP .)
    END             reduce using rule 19 (command -> PENUP .)
    ]               reduce using rule 19 (command -> PENUP .)


state 20

    (20) command -> SETPENCOLOR . [ value value value ]

    [               shift and go to state 43


state 21

    (21) command -> MAKE . VARNAME value

    VARNAME         shift and go to state 44


state 22

    (22) command -> IF . condition [ program ]
    (39) condition -> . value
    (40) condition -> . value LOGIC value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    condition                      shift and go to state 45
    value                          shift and go to state 46

state 23

    (23) command -> IFELSE . condition [ program ] [ program ]
    (39) condition -> . value
    (40) condition -> . value LOGIC value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    condition                      shift and go to state 47
    value                          shift and go to state 46

state 24

    (24) command -> REPEAT . value [ program ]
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 48

state 25

    (25) command -> WHILE . [ condition ] [ program ]
    (26) command -> WHILE . condition [ program ]
    (39) condition -> . value
    (40) condition -> . value LOGIC value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    [               shift and go to state 49
    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    condition                      shift and go to state 50
    value                          shift and go to state 46

state 26

    (27) command -> TO . NAMETO program END
    (28) command -> TO . NAMETO vars program END

    NAMETO          shift and go to state 51


state 27

    (29) command -> NAMETO .
    (30) command -> NAMETO . values
    (37) values -> . value
    (38) values -> . values value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    FORWARD         reduce using rule 29 (command -> NAMETO .)
    FD              reduce using rule 29 (command -> NAMETO .)
    BACK            reduce using rule 29 (command -> NAMETO .)
    BK              reduce using rule 29 (command -> NAMETO .)
    LT              reduce using rule 29 (command -> NAMETO .)
    LEFT            reduce using rule 29 (command -> NAMETO .)
    RT              reduce using rule 29 (command -> NAMETO .)
    RIGHT           reduce using rule 29 (command -> NAMETO .)
    SETPOS          reduce using rule 29 (command -> NAMETO .)
    SETXY           reduce using rule 29 (command -> NAMETO .)
    SETX            reduce using rule 29 (command -> NAMETO .)
    SETY            reduce using rule 29 (command -> NAMETO .)
    HOME            reduce using rule 29 (command -> NAMETO .)
    PD              reduce using rule 29 (command -> NAMETO .)
    PENDOWN         reduce using rule 29 (command -> NAMETO .)
    PU              reduce using rule 29 (command -> NAMETO .)
    PENUP           reduce using rule 29 (command -> NAMETO .)
    SETPENCOLOR     reduce using rule 29 (command -> NAMETO .)
    MAKE            reduce using rule 29 (command -> NAMETO .)
    IF              reduce using rule 29 (command -> NAMETO .)
    IFELSE          reduce using rule 29 (command -> NAMETO .)
    REPEAT          reduce using rule 29 (command -> NAMETO .)
    WHILE           reduce using rule 29 (command -> NAMETO .)
    TO              reduce using rule 29 (command -> NAMETO .)
    NAMETO          reduce using rule 29 (command -> NAMETO .)
    $end            reduce using rule 29 (command -> NAMETO .)
    END             reduce using rule 29 (command -> NAMETO .)
    ]               reduce using rule 29 (command -> NAMETO .)
    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    values                         shift and go to state 52
    value                          shift and go to state 53

state 28

    (2) program -> program command .

    FORWARD         reduce using rule 2 (program -> program command .)
    FD              reduce using rule 2 (program -> program command .)
    BACK            reduce using rule 2 (program -> program command .)
    BK              reduce using rule 2 (program -> program command .)
    LT              reduce using rule 2 (program -> program command .)
    LEFT            reduce using rule 2 (program -> program command .)
    RT              reduce using rule 2 (program -> program command .)
    RIGHT           reduce using rule 2 (program -> program command .)
    SETPOS          reduce using rule 2 (program -> program command .)
    SETXY           reduce using rule 2 (program -> program command .)
    SETX            reduce using rule 2 (program -> program command .)
    SETY            reduce using rule 2 (program -> program command .)
    HOME            reduce using rule 2 (program -> program command .)
    PD              reduce using rule 2 (program -> program command .)
    PENDOWN         reduce using rule 2 (program -> program command .)
    PU              reduce using rule 2 (program -> program command .)
    PENUP           reduce using rule 2 (program -> program command .)
    SETPENCOLOR     reduce using rule 2 (program -> program command .)
    MAKE            reduce using rule 2 (program -> program command .)
    IF              reduce using rule 2 (program -> program command .)
    IFELSE          reduce using rule 2 (program -> program command .)
    REPEAT          reduce using rule 2 (program -> program command .)
    WHILE           reduce using rule 2 (program -> program command .)
    TO              reduce using rule 2 (program -> program command .)
    NAMETO          reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)
    END             reduce using rule 2 (program -> program command .)
    ]               reduce using rule 2 (program -> program command .)


state 29

    (3) command -> FORWARD value .

    FORWARD         reduce using rule 3 (command -> FORWARD value .)
    FD              reduce using rule 3 (command -> FORWARD value .)
    BACK            reduce using rule 3 (command -> FORWARD value .)
    BK              reduce using rule 3 (command -> FORWARD value .)
    LT              reduce using rule 3 (command -> FORWARD value .)
    LEFT            reduce using rule 3 (command -> FORWARD value .)
    RT              reduce using rule 3 (command -> FORWARD value .)
    RIGHT           reduce using rule 3 (command -> FORWARD value .)
    SETPOS          reduce using rule 3 (command -> FORWARD value .)
    SETXY           reduce using rule 3 (command -> FORWARD value .)
    SETX            reduce using rule 3 (command -> FORWARD value .)
    SETY            reduce using rule 3 (command -> FORWARD value .)
    HOME            reduce using rule 3 (command -> FORWARD value .)
    PD              reduce using rule 3 (command -> FORWARD value .)
    PENDOWN         reduce using rule 3 (command -> FORWARD value .)
    PU              reduce using rule 3 (command -> FORWARD value .)
    PENUP           reduce using rule 3 (command -> FORWARD value .)
    SETPENCOLOR     reduce using rule 3 (command -> FORWARD value .)
    MAKE            reduce using rule 3 (command -> FORWARD value .)
    IF              reduce using rule 3 (command -> FORWARD value .)
    IFELSE          reduce using rule 3 (command -> FORWARD value .)
    REPEAT          reduce using rule 3 (command -> FORWARD value .)
    WHILE           reduce using rule 3 (command -> FORWARD value .)
    TO              reduce using rule 3 (command -> FORWARD value .)
    NAMETO          reduce using rule 3 (command -> FORWARD value .)
    $end            reduce using rule 3 (command -> FORWARD value .)
    END             reduce using rule 3 (command -> FORWARD value .)
    ]               reduce using rule 3 (command -> FORWARD value .)


state 30

    (31) value -> NUM .
    (34) value -> NUM . OPERATOR VARUSE
    (35) value -> NUM . OPERATOR NUM

    FORWARD         reduce using rule 31 (value -> NUM .)
    FD              reduce using rule 31 (value -> NUM .)
    BACK            reduce using rule 31 (value -> NUM .)
    BK              reduce using rule 31 (value -> NUM .)
    LT              reduce using rule 31 (value -> NUM .)
    LEFT            reduce using rule 31 (value -> NUM .)
    RT              reduce using rule 31 (value -> NUM .)
    RIGHT           reduce using rule 31 (value -> NUM .)
    SETPOS          reduce using rule 31 (value -> NUM .)
    SETXY           reduce using rule 31 (value -> NUM .)
    SETX            reduce using rule 31 (value -> NUM .)
    SETY            reduce using rule 31 (value -> NUM .)
    HOME            reduce using rule 31 (value -> NUM .)
    PD              reduce using rule 31 (value -> NUM .)
    PENDOWN         reduce using rule 31 (value -> NUM .)
    PU              reduce using rule 31 (value -> NUM .)
    PENUP           reduce using rule 31 (value -> NUM .)
    SETPENCOLOR     reduce using rule 31 (value -> NUM .)
    MAKE            reduce using rule 31 (value -> NUM .)
    IF              reduce using rule 31 (value -> NUM .)
    IFELSE          reduce using rule 31 (value -> NUM .)
    REPEAT          reduce using rule 31 (value -> NUM .)
    WHILE           reduce using rule 31 (value -> NUM .)
    TO              reduce using rule 31 (value -> NUM .)
    NAMETO          reduce using rule 31 (value -> NUM .)
    $end            reduce using rule 31 (value -> NUM .)
    END             reduce using rule 31 (value -> NUM .)
    ]               reduce using rule 31 (value -> NUM .)
    NUM             reduce using rule 31 (value -> NUM .)
    VARUSE          reduce using rule 31 (value -> NUM .)
    LOGIC           reduce using rule 31 (value -> NUM .)
    [               reduce using rule 31 (value -> NUM .)
    OPERATOR        shift and go to state 54


state 31

    (32) value -> VARUSE .
    (33) value -> VARUSE . OPERATOR NUM
    (36) value -> VARUSE . OPERATOR VARUSE

    FORWARD         reduce using rule 32 (value -> VARUSE .)
    FD              reduce using rule 32 (value -> VARUSE .)
    BACK            reduce using rule 32 (value -> VARUSE .)
    BK              reduce using rule 32 (value -> VARUSE .)
    LT              reduce using rule 32 (value -> VARUSE .)
    LEFT            reduce using rule 32 (value -> VARUSE .)
    RT              reduce using rule 32 (value -> VARUSE .)
    RIGHT           reduce using rule 32 (value -> VARUSE .)
    SETPOS          reduce using rule 32 (value -> VARUSE .)
    SETXY           reduce using rule 32 (value -> VARUSE .)
    SETX            reduce using rule 32 (value -> VARUSE .)
    SETY            reduce using rule 32 (value -> VARUSE .)
    HOME            reduce using rule 32 (value -> VARUSE .)
    PD              reduce using rule 32 (value -> VARUSE .)
    PENDOWN         reduce using rule 32 (value -> VARUSE .)
    PU              reduce using rule 32 (value -> VARUSE .)
    PENUP           reduce using rule 32 (value -> VARUSE .)
    SETPENCOLOR     reduce using rule 32 (value -> VARUSE .)
    MAKE            reduce using rule 32 (value -> VARUSE .)
    IF              reduce using rule 32 (value -> VARUSE .)
    IFELSE          reduce using rule 32 (value -> VARUSE .)
    REPEAT          reduce using rule 32 (value -> VARUSE .)
    WHILE           reduce using rule 32 (value -> VARUSE .)
    TO              reduce using rule 32 (value -> VARUSE .)
    NAMETO          reduce using rule 32 (value -> VARUSE .)
    $end            reduce using rule 32 (value -> VARUSE .)
    END             reduce using rule 32 (value -> VARUSE .)
    ]               reduce using rule 32 (value -> VARUSE .)
    NUM             reduce using rule 32 (value -> VARUSE .)
    VARUSE          reduce using rule 32 (value -> VARUSE .)
    LOGIC           reduce using rule 32 (value -> VARUSE .)
    [               reduce using rule 32 (value -> VARUSE .)
    OPERATOR        shift and go to state 55


state 32

    (4) command -> FD value .

    FORWARD         reduce using rule 4 (command -> FD value .)
    FD              reduce using rule 4 (command -> FD value .)
    BACK            reduce using rule 4 (command -> FD value .)
    BK              reduce using rule 4 (command -> FD value .)
    LT              reduce using rule 4 (command -> FD value .)
    LEFT            reduce using rule 4 (command -> FD value .)
    RT              reduce using rule 4 (command -> FD value .)
    RIGHT           reduce using rule 4 (command -> FD value .)
    SETPOS          reduce using rule 4 (command -> FD value .)
    SETXY           reduce using rule 4 (command -> FD value .)
    SETX            reduce using rule 4 (command -> FD value .)
    SETY            reduce using rule 4 (command -> FD value .)
    HOME            reduce using rule 4 (command -> FD value .)
    PD              reduce using rule 4 (command -> FD value .)
    PENDOWN         reduce using rule 4 (command -> FD value .)
    PU              reduce using rule 4 (command -> FD value .)
    PENUP           reduce using rule 4 (command -> FD value .)
    SETPENCOLOR     reduce using rule 4 (command -> FD value .)
    MAKE            reduce using rule 4 (command -> FD value .)
    IF              reduce using rule 4 (command -> FD value .)
    IFELSE          reduce using rule 4 (command -> FD value .)
    REPEAT          reduce using rule 4 (command -> FD value .)
    WHILE           reduce using rule 4 (command -> FD value .)
    TO              reduce using rule 4 (command -> FD value .)
    NAMETO          reduce using rule 4 (command -> FD value .)
    $end            reduce using rule 4 (command -> FD value .)
    END             reduce using rule 4 (command -> FD value .)
    ]               reduce using rule 4 (command -> FD value .)


state 33

    (5) command -> BACK value .

    FORWARD         reduce using rule 5 (command -> BACK value .)
    FD              reduce using rule 5 (command -> BACK value .)
    BACK            reduce using rule 5 (command -> BACK value .)
    BK              reduce using rule 5 (command -> BACK value .)
    LT              reduce using rule 5 (command -> BACK value .)
    LEFT            reduce using rule 5 (command -> BACK value .)
    RT              reduce using rule 5 (command -> BACK value .)
    RIGHT           reduce using rule 5 (command -> BACK value .)
    SETPOS          reduce using rule 5 (command -> BACK value .)
    SETXY           reduce using rule 5 (command -> BACK value .)
    SETX            reduce using rule 5 (command -> BACK value .)
    SETY            reduce using rule 5 (command -> BACK value .)
    HOME            reduce using rule 5 (command -> BACK value .)
    PD              reduce using rule 5 (command -> BACK value .)
    PENDOWN         reduce using rule 5 (command -> BACK value .)
    PU              reduce using rule 5 (command -> BACK value .)
    PENUP           reduce using rule 5 (command -> BACK value .)
    SETPENCOLOR     reduce using rule 5 (command -> BACK value .)
    MAKE            reduce using rule 5 (command -> BACK value .)
    IF              reduce using rule 5 (command -> BACK value .)
    IFELSE          reduce using rule 5 (command -> BACK value .)
    REPEAT          reduce using rule 5 (command -> BACK value .)
    WHILE           reduce using rule 5 (command -> BACK value .)
    TO              reduce using rule 5 (command -> BACK value .)
    NAMETO          reduce using rule 5 (command -> BACK value .)
    $end            reduce using rule 5 (command -> BACK value .)
    END             reduce using rule 5 (command -> BACK value .)
    ]               reduce using rule 5 (command -> BACK value .)


state 34

    (6) command -> BK value .

    FORWARD         reduce using rule 6 (command -> BK value .)
    FD              reduce using rule 6 (command -> BK value .)
    BACK            reduce using rule 6 (command -> BK value .)
    BK              reduce using rule 6 (command -> BK value .)
    LT              reduce using rule 6 (command -> BK value .)
    LEFT            reduce using rule 6 (command -> BK value .)
    RT              reduce using rule 6 (command -> BK value .)
    RIGHT           reduce using rule 6 (command -> BK value .)
    SETPOS          reduce using rule 6 (command -> BK value .)
    SETXY           reduce using rule 6 (command -> BK value .)
    SETX            reduce using rule 6 (command -> BK value .)
    SETY            reduce using rule 6 (command -> BK value .)
    HOME            reduce using rule 6 (command -> BK value .)
    PD              reduce using rule 6 (command -> BK value .)
    PENDOWN         reduce using rule 6 (command -> BK value .)
    PU              reduce using rule 6 (command -> BK value .)
    PENUP           reduce using rule 6 (command -> BK value .)
    SETPENCOLOR     reduce using rule 6 (command -> BK value .)
    MAKE            reduce using rule 6 (command -> BK value .)
    IF              reduce using rule 6 (command -> BK value .)
    IFELSE          reduce using rule 6 (command -> BK value .)
    REPEAT          reduce using rule 6 (command -> BK value .)
    WHILE           reduce using rule 6 (command -> BK value .)
    TO              reduce using rule 6 (command -> BK value .)
    NAMETO          reduce using rule 6 (command -> BK value .)
    $end            reduce using rule 6 (command -> BK value .)
    END             reduce using rule 6 (command -> BK value .)
    ]               reduce using rule 6 (command -> BK value .)


state 35

    (7) command -> LT value .

    FORWARD         reduce using rule 7 (command -> LT value .)
    FD              reduce using rule 7 (command -> LT value .)
    BACK            reduce using rule 7 (command -> LT value .)
    BK              reduce using rule 7 (command -> LT value .)
    LT              reduce using rule 7 (command -> LT value .)
    LEFT            reduce using rule 7 (command -> LT value .)
    RT              reduce using rule 7 (command -> LT value .)
    RIGHT           reduce using rule 7 (command -> LT value .)
    SETPOS          reduce using rule 7 (command -> LT value .)
    SETXY           reduce using rule 7 (command -> LT value .)
    SETX            reduce using rule 7 (command -> LT value .)
    SETY            reduce using rule 7 (command -> LT value .)
    HOME            reduce using rule 7 (command -> LT value .)
    PD              reduce using rule 7 (command -> LT value .)
    PENDOWN         reduce using rule 7 (command -> LT value .)
    PU              reduce using rule 7 (command -> LT value .)
    PENUP           reduce using rule 7 (command -> LT value .)
    SETPENCOLOR     reduce using rule 7 (command -> LT value .)
    MAKE            reduce using rule 7 (command -> LT value .)
    IF              reduce using rule 7 (command -> LT value .)
    IFELSE          reduce using rule 7 (command -> LT value .)
    REPEAT          reduce using rule 7 (command -> LT value .)
    WHILE           reduce using rule 7 (command -> LT value .)
    TO              reduce using rule 7 (command -> LT value .)
    NAMETO          reduce using rule 7 (command -> LT value .)
    $end            reduce using rule 7 (command -> LT value .)
    END             reduce using rule 7 (command -> LT value .)
    ]               reduce using rule 7 (command -> LT value .)


state 36

    (8) command -> LEFT value .

    FORWARD         reduce using rule 8 (command -> LEFT value .)
    FD              reduce using rule 8 (command -> LEFT value .)
    BACK            reduce using rule 8 (command -> LEFT value .)
    BK              reduce using rule 8 (command -> LEFT value .)
    LT              reduce using rule 8 (command -> LEFT value .)
    LEFT            reduce using rule 8 (command -> LEFT value .)
    RT              reduce using rule 8 (command -> LEFT value .)
    RIGHT           reduce using rule 8 (command -> LEFT value .)
    SETPOS          reduce using rule 8 (command -> LEFT value .)
    SETXY           reduce using rule 8 (command -> LEFT value .)
    SETX            reduce using rule 8 (command -> LEFT value .)
    SETY            reduce using rule 8 (command -> LEFT value .)
    HOME            reduce using rule 8 (command -> LEFT value .)
    PD              reduce using rule 8 (command -> LEFT value .)
    PENDOWN         reduce using rule 8 (command -> LEFT value .)
    PU              reduce using rule 8 (command -> LEFT value .)
    PENUP           reduce using rule 8 (command -> LEFT value .)
    SETPENCOLOR     reduce using rule 8 (command -> LEFT value .)
    MAKE            reduce using rule 8 (command -> LEFT value .)
    IF              reduce using rule 8 (command -> LEFT value .)
    IFELSE          reduce using rule 8 (command -> LEFT value .)
    REPEAT          reduce using rule 8 (command -> LEFT value .)
    WHILE           reduce using rule 8 (command -> LEFT value .)
    TO              reduce using rule 8 (command -> LEFT value .)
    NAMETO          reduce using rule 8 (command -> LEFT value .)
    $end            reduce using rule 8 (command -> LEFT value .)
    END             reduce using rule 8 (command -> LEFT value .)
    ]               reduce using rule 8 (command -> LEFT value .)


state 37

    (9) command -> RT value .

    FORWARD         reduce using rule 9 (command -> RT value .)
    FD              reduce using rule 9 (command -> RT value .)
    BACK            reduce using rule 9 (command -> RT value .)
    BK              reduce using rule 9 (command -> RT value .)
    LT              reduce using rule 9 (command -> RT value .)
    LEFT            reduce using rule 9 (command -> RT value .)
    RT              reduce using rule 9 (command -> RT value .)
    RIGHT           reduce using rule 9 (command -> RT value .)
    SETPOS          reduce using rule 9 (command -> RT value .)
    SETXY           reduce using rule 9 (command -> RT value .)
    SETX            reduce using rule 9 (command -> RT value .)
    SETY            reduce using rule 9 (command -> RT value .)
    HOME            reduce using rule 9 (command -> RT value .)
    PD              reduce using rule 9 (command -> RT value .)
    PENDOWN         reduce using rule 9 (command -> RT value .)
    PU              reduce using rule 9 (command -> RT value .)
    PENUP           reduce using rule 9 (command -> RT value .)
    SETPENCOLOR     reduce using rule 9 (command -> RT value .)
    MAKE            reduce using rule 9 (command -> RT value .)
    IF              reduce using rule 9 (command -> RT value .)
    IFELSE          reduce using rule 9 (command -> RT value .)
    REPEAT          reduce using rule 9 (command -> RT value .)
    WHILE           reduce using rule 9 (command -> RT value .)
    TO              reduce using rule 9 (command -> RT value .)
    NAMETO          reduce using rule 9 (command -> RT value .)
    $end            reduce using rule 9 (command -> RT value .)
    END             reduce using rule 9 (command -> RT value .)
    ]               reduce using rule 9 (command -> RT value .)


state 38

    (10) command -> RIGHT value .

    FORWARD         reduce using rule 10 (command -> RIGHT value .)
    FD              reduce using rule 10 (command -> RIGHT value .)
    BACK            reduce using rule 10 (command -> RIGHT value .)
    BK              reduce using rule 10 (command -> RIGHT value .)
    LT              reduce using rule 10 (command -> RIGHT value .)
    LEFT            reduce using rule 10 (command -> RIGHT value .)
    RT              reduce using rule 10 (command -> RIGHT value .)
    RIGHT           reduce using rule 10 (command -> RIGHT value .)
    SETPOS          reduce using rule 10 (command -> RIGHT value .)
    SETXY           reduce using rule 10 (command -> RIGHT value .)
    SETX            reduce using rule 10 (command -> RIGHT value .)
    SETY            reduce using rule 10 (command -> RIGHT value .)
    HOME            reduce using rule 10 (command -> RIGHT value .)
    PD              reduce using rule 10 (command -> RIGHT value .)
    PENDOWN         reduce using rule 10 (command -> RIGHT value .)
    PU              reduce using rule 10 (command -> RIGHT value .)
    PENUP           reduce using rule 10 (command -> RIGHT value .)
    SETPENCOLOR     reduce using rule 10 (command -> RIGHT value .)
    MAKE            reduce using rule 10 (command -> RIGHT value .)
    IF              reduce using rule 10 (command -> RIGHT value .)
    IFELSE          reduce using rule 10 (command -> RIGHT value .)
    REPEAT          reduce using rule 10 (command -> RIGHT value .)
    WHILE           reduce using rule 10 (command -> RIGHT value .)
    TO              reduce using rule 10 (command -> RIGHT value .)
    NAMETO          reduce using rule 10 (command -> RIGHT value .)
    $end            reduce using rule 10 (command -> RIGHT value .)
    END             reduce using rule 10 (command -> RIGHT value .)
    ]               reduce using rule 10 (command -> RIGHT value .)


state 39

    (11) command -> SETPOS [ . value value ]
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 56

state 40

    (12) command -> SETXY value . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 57

state 41

    (13) command -> SETX value .

    FORWARD         reduce using rule 13 (command -> SETX value .)
    FD              reduce using rule 13 (command -> SETX value .)
    BACK            reduce using rule 13 (command -> SETX value .)
    BK              reduce using rule 13 (command -> SETX value .)
    LT              reduce using rule 13 (command -> SETX value .)
    LEFT            reduce using rule 13 (command -> SETX value .)
    RT              reduce using rule 13 (command -> SETX value .)
    RIGHT           reduce using rule 13 (command -> SETX value .)
    SETPOS          reduce using rule 13 (command -> SETX value .)
    SETXY           reduce using rule 13 (command -> SETX value .)
    SETX            reduce using rule 13 (command -> SETX value .)
    SETY            reduce using rule 13 (command -> SETX value .)
    HOME            reduce using rule 13 (command -> SETX value .)
    PD              reduce using rule 13 (command -> SETX value .)
    PENDOWN         reduce using rule 13 (command -> SETX value .)
    PU              reduce using rule 13 (command -> SETX value .)
    PENUP           reduce using rule 13 (command -> SETX value .)
    SETPENCOLOR     reduce using rule 13 (command -> SETX value .)
    MAKE            reduce using rule 13 (command -> SETX value .)
    IF              reduce using rule 13 (command -> SETX value .)
    IFELSE          reduce using rule 13 (command -> SETX value .)
    REPEAT          reduce using rule 13 (command -> SETX value .)
    WHILE           reduce using rule 13 (command -> SETX value .)
    TO              reduce using rule 13 (command -> SETX value .)
    NAMETO          reduce using rule 13 (command -> SETX value .)
    $end            reduce using rule 13 (command -> SETX value .)
    END             reduce using rule 13 (command -> SETX value .)
    ]               reduce using rule 13 (command -> SETX value .)


state 42

    (14) command -> SETY value .

    FORWARD         reduce using rule 14 (command -> SETY value .)
    FD              reduce using rule 14 (command -> SETY value .)
    BACK            reduce using rule 14 (command -> SETY value .)
    BK              reduce using rule 14 (command -> SETY value .)
    LT              reduce using rule 14 (command -> SETY value .)
    LEFT            reduce using rule 14 (command -> SETY value .)
    RT              reduce using rule 14 (command -> SETY value .)
    RIGHT           reduce using rule 14 (command -> SETY value .)
    SETPOS          reduce using rule 14 (command -> SETY value .)
    SETXY           reduce using rule 14 (command -> SETY value .)
    SETX            reduce using rule 14 (command -> SETY value .)
    SETY            reduce using rule 14 (command -> SETY value .)
    HOME            reduce using rule 14 (command -> SETY value .)
    PD              reduce using rule 14 (command -> SETY value .)
    PENDOWN         reduce using rule 14 (command -> SETY value .)
    PU              reduce using rule 14 (command -> SETY value .)
    PENUP           reduce using rule 14 (command -> SETY value .)
    SETPENCOLOR     reduce using rule 14 (command -> SETY value .)
    MAKE            reduce using rule 14 (command -> SETY value .)
    IF              reduce using rule 14 (command -> SETY value .)
    IFELSE          reduce using rule 14 (command -> SETY value .)
    REPEAT          reduce using rule 14 (command -> SETY value .)
    WHILE           reduce using rule 14 (command -> SETY value .)
    TO              reduce using rule 14 (command -> SETY value .)
    NAMETO          reduce using rule 14 (command -> SETY value .)
    $end            reduce using rule 14 (command -> SETY value .)
    END             reduce using rule 14 (command -> SETY value .)
    ]               reduce using rule 14 (command -> SETY value .)


state 43

    (20) command -> SETPENCOLOR [ . value value value ]
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 58

state 44

    (21) command -> MAKE VARNAME . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 59

state 45

    (22) command -> IF condition . [ program ]

    [               shift and go to state 60


state 46

    (39) condition -> value .
    (40) condition -> value . LOGIC value

    [               reduce using rule 39 (condition -> value .)
    ]               reduce using rule 39 (condition -> value .)
    LOGIC           shift and go to state 61


state 47

    (23) command -> IFELSE condition . [ program ] [ program ]

    [               shift and go to state 62


state 48

    (24) command -> REPEAT value . [ program ]

    [               shift and go to state 63


state 49

    (25) command -> WHILE [ . condition ] [ program ]
    (39) condition -> . value
    (40) condition -> . value LOGIC value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    condition                      shift and go to state 64
    value                          shift and go to state 46

state 50

    (26) command -> WHILE condition . [ program ]

    [               shift and go to state 65


state 51

    (27) command -> TO NAMETO . program END
    (28) command -> TO NAMETO . vars program END
    (1) program -> . command
    (2) program -> . program command
    (41) vars -> . VARUSE
    (42) vars -> . vars VARUSE
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    VARUSE          shift and go to state 68
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 66
    vars                           shift and go to state 67
    command                        shift and go to state 2

state 52

    (30) command -> NAMETO values .
    (38) values -> values . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    FORWARD         reduce using rule 30 (command -> NAMETO values .)
    FD              reduce using rule 30 (command -> NAMETO values .)
    BACK            reduce using rule 30 (command -> NAMETO values .)
    BK              reduce using rule 30 (command -> NAMETO values .)
    LT              reduce using rule 30 (command -> NAMETO values .)
    LEFT            reduce using rule 30 (command -> NAMETO values .)
    RT              reduce using rule 30 (command -> NAMETO values .)
    RIGHT           reduce using rule 30 (command -> NAMETO values .)
    SETPOS          reduce using rule 30 (command -> NAMETO values .)
    SETXY           reduce using rule 30 (command -> NAMETO values .)
    SETX            reduce using rule 30 (command -> NAMETO values .)
    SETY            reduce using rule 30 (command -> NAMETO values .)
    HOME            reduce using rule 30 (command -> NAMETO values .)
    PD              reduce using rule 30 (command -> NAMETO values .)
    PENDOWN         reduce using rule 30 (command -> NAMETO values .)
    PU              reduce using rule 30 (command -> NAMETO values .)
    PENUP           reduce using rule 30 (command -> NAMETO values .)
    SETPENCOLOR     reduce using rule 30 (command -> NAMETO values .)
    MAKE            reduce using rule 30 (command -> NAMETO values .)
    IF              reduce using rule 30 (command -> NAMETO values .)
    IFELSE          reduce using rule 30 (command -> NAMETO values .)
    REPEAT          reduce using rule 30 (command -> NAMETO values .)
    WHILE           reduce using rule 30 (command -> NAMETO values .)
    TO              reduce using rule 30 (command -> NAMETO values .)
    NAMETO          reduce using rule 30 (command -> NAMETO values .)
    $end            reduce using rule 30 (command -> NAMETO values .)
    END             reduce using rule 30 (command -> NAMETO values .)
    ]               reduce using rule 30 (command -> NAMETO values .)
    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 69

state 53

    (37) values -> value .

    NUM             reduce using rule 37 (values -> value .)
    VARUSE          reduce using rule 37 (values -> value .)
    FORWARD         reduce using rule 37 (values -> value .)
    FD              reduce using rule 37 (values -> value .)
    BACK            reduce using rule 37 (values -> value .)
    BK              reduce using rule 37 (values -> value .)
    LT              reduce using rule 37 (values -> value .)
    LEFT            reduce using rule 37 (values -> value .)
    RT              reduce using rule 37 (values -> value .)
    RIGHT           reduce using rule 37 (values -> value .)
    SETPOS          reduce using rule 37 (values -> value .)
    SETXY           reduce using rule 37 (values -> value .)
    SETX            reduce using rule 37 (values -> value .)
    SETY            reduce using rule 37 (values -> value .)
    HOME            reduce using rule 37 (values -> value .)
    PD              reduce using rule 37 (values -> value .)
    PENDOWN         reduce using rule 37 (values -> value .)
    PU              reduce using rule 37 (values -> value .)
    PENUP           reduce using rule 37 (values -> value .)
    SETPENCOLOR     reduce using rule 37 (values -> value .)
    MAKE            reduce using rule 37 (values -> value .)
    IF              reduce using rule 37 (values -> value .)
    IFELSE          reduce using rule 37 (values -> value .)
    REPEAT          reduce using rule 37 (values -> value .)
    WHILE           reduce using rule 37 (values -> value .)
    TO              reduce using rule 37 (values -> value .)
    NAMETO          reduce using rule 37 (values -> value .)
    $end            reduce using rule 37 (values -> value .)
    END             reduce using rule 37 (values -> value .)
    ]               reduce using rule 37 (values -> value .)


state 54

    (34) value -> NUM OPERATOR . VARUSE
    (35) value -> NUM OPERATOR . NUM

    VARUSE          shift and go to state 71
    NUM             shift and go to state 70


state 55

    (33) value -> VARUSE OPERATOR . NUM
    (36) value -> VARUSE OPERATOR . VARUSE

    NUM             shift and go to state 73
    VARUSE          shift and go to state 72


state 56

    (11) command -> SETPOS [ value . value ]
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 74

state 57

    (12) command -> SETXY value value .

    FORWARD         reduce using rule 12 (command -> SETXY value value .)
    FD              reduce using rule 12 (command -> SETXY value value .)
    BACK            reduce using rule 12 (command -> SETXY value value .)
    BK              reduce using rule 12 (command -> SETXY value value .)
    LT              reduce using rule 12 (command -> SETXY value value .)
    LEFT            reduce using rule 12 (command -> SETXY value value .)
    RT              reduce using rule 12 (command -> SETXY value value .)
    RIGHT           reduce using rule 12 (command -> SETXY value value .)
    SETPOS          reduce using rule 12 (command -> SETXY value value .)
    SETXY           reduce using rule 12 (command -> SETXY value value .)
    SETX            reduce using rule 12 (command -> SETXY value value .)
    SETY            reduce using rule 12 (command -> SETXY value value .)
    HOME            reduce using rule 12 (command -> SETXY value value .)
    PD              reduce using rule 12 (command -> SETXY value value .)
    PENDOWN         reduce using rule 12 (command -> SETXY value value .)
    PU              reduce using rule 12 (command -> SETXY value value .)
    PENUP           reduce using rule 12 (command -> SETXY value value .)
    SETPENCOLOR     reduce using rule 12 (command -> SETXY value value .)
    MAKE            reduce using rule 12 (command -> SETXY value value .)
    IF              reduce using rule 12 (command -> SETXY value value .)
    IFELSE          reduce using rule 12 (command -> SETXY value value .)
    REPEAT          reduce using rule 12 (command -> SETXY value value .)
    WHILE           reduce using rule 12 (command -> SETXY value value .)
    TO              reduce using rule 12 (command -> SETXY value value .)
    NAMETO          reduce using rule 12 (command -> SETXY value value .)
    $end            reduce using rule 12 (command -> SETXY value value .)
    END             reduce using rule 12 (command -> SETXY value value .)
    ]               reduce using rule 12 (command -> SETXY value value .)


state 58

    (20) command -> SETPENCOLOR [ value . value value ]
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 75

state 59

    (21) command -> MAKE VARNAME value .

    FORWARD         reduce using rule 21 (command -> MAKE VARNAME value .)
    FD              reduce using rule 21 (command -> MAKE VARNAME value .)
    BACK            reduce using rule 21 (command -> MAKE VARNAME value .)
    BK              reduce using rule 21 (command -> MAKE VARNAME value .)
    LT              reduce using rule 21 (command -> MAKE VARNAME value .)
    LEFT            reduce using rule 21 (command -> MAKE VARNAME value .)
    RT              reduce using rule 21 (command -> MAKE VARNAME value .)
    RIGHT           reduce using rule 21 (command -> MAKE VARNAME value .)
    SETPOS          reduce using rule 21 (command -> MAKE VARNAME value .)
    SETXY           reduce using rule 21 (command -> MAKE VARNAME value .)
    SETX            reduce using rule 21 (command -> MAKE VARNAME value .)
    SETY            reduce using rule 21 (command -> MAKE VARNAME value .)
    HOME            reduce using rule 21 (command -> MAKE VARNAME value .)
    PD              reduce using rule 21 (command -> MAKE VARNAME value .)
    PENDOWN         reduce using rule 21 (command -> MAKE VARNAME value .)
    PU              reduce using rule 21 (command -> MAKE VARNAME value .)
    PENUP           reduce using rule 21 (command -> MAKE VARNAME value .)
    SETPENCOLOR     reduce using rule 21 (command -> MAKE VARNAME value .)
    MAKE            reduce using rule 21 (command -> MAKE VARNAME value .)
    IF              reduce using rule 21 (command -> MAKE VARNAME value .)
    IFELSE          reduce using rule 21 (command -> MAKE VARNAME value .)
    REPEAT          reduce using rule 21 (command -> MAKE VARNAME value .)
    WHILE           reduce using rule 21 (command -> MAKE VARNAME value .)
    TO              reduce using rule 21 (command -> MAKE VARNAME value .)
    NAMETO          reduce using rule 21 (command -> MAKE VARNAME value .)
    $end            reduce using rule 21 (command -> MAKE VARNAME value .)
    END             reduce using rule 21 (command -> MAKE VARNAME value .)
    ]               reduce using rule 21 (command -> MAKE VARNAME value .)


state 60

    (22) command -> IF condition [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 76
    command                        shift and go to state 2

state 61

    (40) condition -> value LOGIC . value
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 77

state 62

    (23) command -> IFELSE condition [ . program ] [ program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 78
    command                        shift and go to state 2

state 63

    (24) command -> REPEAT value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 79
    command                        shift and go to state 2

state 64

    (25) command -> WHILE [ condition . ] [ program ]

    ]               shift and go to state 80


state 65

    (26) command -> WHILE condition [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 81
    command                        shift and go to state 2

state 66

    (27) command -> TO NAMETO program . END
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    END             shift and go to state 82
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 67

    (28) command -> TO NAMETO vars . program END
    (42) vars -> vars . VARUSE
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    VARUSE          shift and go to state 84
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 83
    command                        shift and go to state 2

state 68

    (41) vars -> VARUSE .

    VARUSE          reduce using rule 41 (vars -> VARUSE .)
    FORWARD         reduce using rule 41 (vars -> VARUSE .)
    FD              reduce using rule 41 (vars -> VARUSE .)
    BACK            reduce using rule 41 (vars -> VARUSE .)
    BK              reduce using rule 41 (vars -> VARUSE .)
    LT              reduce using rule 41 (vars -> VARUSE .)
    LEFT            reduce using rule 41 (vars -> VARUSE .)
    RT              reduce using rule 41 (vars -> VARUSE .)
    RIGHT           reduce using rule 41 (vars -> VARUSE .)
    SETPOS          reduce using rule 41 (vars -> VARUSE .)
    SETXY           reduce using rule 41 (vars -> VARUSE .)
    SETX            reduce using rule 41 (vars -> VARUSE .)
    SETY            reduce using rule 41 (vars -> VARUSE .)
    HOME            reduce using rule 41 (vars -> VARUSE .)
    PD              reduce using rule 41 (vars -> VARUSE .)
    PENDOWN         reduce using rule 41 (vars -> VARUSE .)
    PU              reduce using rule 41 (vars -> VARUSE .)
    PENUP           reduce using rule 41 (vars -> VARUSE .)
    SETPENCOLOR     reduce using rule 41 (vars -> VARUSE .)
    MAKE            reduce using rule 41 (vars -> VARUSE .)
    IF              reduce using rule 41 (vars -> VARUSE .)
    IFELSE          reduce using rule 41 (vars -> VARUSE .)
    REPEAT          reduce using rule 41 (vars -> VARUSE .)
    WHILE           reduce using rule 41 (vars -> VARUSE .)
    TO              reduce using rule 41 (vars -> VARUSE .)
    NAMETO          reduce using rule 41 (vars -> VARUSE .)


state 69

    (38) values -> values value .

    NUM             reduce using rule 38 (values -> values value .)
    VARUSE          reduce using rule 38 (values -> values value .)
    FORWARD         reduce using rule 38 (values -> values value .)
    FD              reduce using rule 38 (values -> values value .)
    BACK            reduce using rule 38 (values -> values value .)
    BK              reduce using rule 38 (values -> values value .)
    LT              reduce using rule 38 (values -> values value .)
    LEFT            reduce using rule 38 (values -> values value .)
    RT              reduce using rule 38 (values -> values value .)
    RIGHT           reduce using rule 38 (values -> values value .)
    SETPOS          reduce using rule 38 (values -> values value .)
    SETXY           reduce using rule 38 (values -> values value .)
    SETX            reduce using rule 38 (values -> values value .)
    SETY            reduce using rule 38 (values -> values value .)
    HOME            reduce using rule 38 (values -> values value .)
    PD              reduce using rule 38 (values -> values value .)
    PENDOWN         reduce using rule 38 (values -> values value .)
    PU              reduce using rule 38 (values -> values value .)
    PENUP           reduce using rule 38 (values -> values value .)
    SETPENCOLOR     reduce using rule 38 (values -> values value .)
    MAKE            reduce using rule 38 (values -> values value .)
    IF              reduce using rule 38 (values -> values value .)
    IFELSE          reduce using rule 38 (values -> values value .)
    REPEAT          reduce using rule 38 (values -> values value .)
    WHILE           reduce using rule 38 (values -> values value .)
    TO              reduce using rule 38 (values -> values value .)
    NAMETO          reduce using rule 38 (values -> values value .)
    $end            reduce using rule 38 (values -> values value .)
    END             reduce using rule 38 (values -> values value .)
    ]               reduce using rule 38 (values -> values value .)


state 70

    (35) value -> NUM OPERATOR NUM .

    FORWARD         reduce using rule 35 (value -> NUM OPERATOR NUM .)
    FD              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    BACK            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    BK              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    LT              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    LEFT            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    RT              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    RIGHT           reduce using rule 35 (value -> NUM OPERATOR NUM .)
    SETPOS          reduce using rule 35 (value -> NUM OPERATOR NUM .)
    SETXY           reduce using rule 35 (value -> NUM OPERATOR NUM .)
    SETX            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    SETY            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    HOME            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    PD              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    PENDOWN         reduce using rule 35 (value -> NUM OPERATOR NUM .)
    PU              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    PENUP           reduce using rule 35 (value -> NUM OPERATOR NUM .)
    SETPENCOLOR     reduce using rule 35 (value -> NUM OPERATOR NUM .)
    MAKE            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    IF              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    IFELSE          reduce using rule 35 (value -> NUM OPERATOR NUM .)
    REPEAT          reduce using rule 35 (value -> NUM OPERATOR NUM .)
    WHILE           reduce using rule 35 (value -> NUM OPERATOR NUM .)
    TO              reduce using rule 35 (value -> NUM OPERATOR NUM .)
    NAMETO          reduce using rule 35 (value -> NUM OPERATOR NUM .)
    $end            reduce using rule 35 (value -> NUM OPERATOR NUM .)
    END             reduce using rule 35 (value -> NUM OPERATOR NUM .)
    ]               reduce using rule 35 (value -> NUM OPERATOR NUM .)
    NUM             reduce using rule 35 (value -> NUM OPERATOR NUM .)
    VARUSE          reduce using rule 35 (value -> NUM OPERATOR NUM .)
    LOGIC           reduce using rule 35 (value -> NUM OPERATOR NUM .)
    [               reduce using rule 35 (value -> NUM OPERATOR NUM .)


state 71

    (34) value -> NUM OPERATOR VARUSE .

    FORWARD         reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    FD              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    BACK            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    BK              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    LT              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    LEFT            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    RT              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    RIGHT           reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    SETPOS          reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    SETXY           reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    SETX            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    SETY            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    HOME            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    PD              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    PENDOWN         reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    PU              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    PENUP           reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    SETPENCOLOR     reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    MAKE            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    IF              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    IFELSE          reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    REPEAT          reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    WHILE           reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    TO              reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    NAMETO          reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    $end            reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    END             reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    ]               reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    NUM             reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    VARUSE          reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    LOGIC           reduce using rule 34 (value -> NUM OPERATOR VARUSE .)
    [               reduce using rule 34 (value -> NUM OPERATOR VARUSE .)


state 72

    (36) value -> VARUSE OPERATOR VARUSE .

    FORWARD         reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    FD              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    BACK            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    BK              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    LT              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    LEFT            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    RT              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    RIGHT           reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    SETPOS          reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    SETXY           reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    SETX            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    SETY            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    HOME            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    PD              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    PENDOWN         reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    PU              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    PENUP           reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    SETPENCOLOR     reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    MAKE            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    IF              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    IFELSE          reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    REPEAT          reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    WHILE           reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    TO              reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    NAMETO          reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    $end            reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    END             reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    ]               reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    NUM             reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    VARUSE          reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    LOGIC           reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)
    [               reduce using rule 36 (value -> VARUSE OPERATOR VARUSE .)


state 73

    (33) value -> VARUSE OPERATOR NUM .

    FORWARD         reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    FD              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    BACK            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    BK              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    LT              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    LEFT            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    RT              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    RIGHT           reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    SETPOS          reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    SETXY           reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    SETX            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    SETY            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    HOME            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    PD              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    PENDOWN         reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    PU              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    PENUP           reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    SETPENCOLOR     reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    MAKE            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    IF              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    IFELSE          reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    REPEAT          reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    WHILE           reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    TO              reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    NAMETO          reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    $end            reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    END             reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    ]               reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    NUM             reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    VARUSE          reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    LOGIC           reduce using rule 33 (value -> VARUSE OPERATOR NUM .)
    [               reduce using rule 33 (value -> VARUSE OPERATOR NUM .)


state 74

    (11) command -> SETPOS [ value value . ]

    ]               shift and go to state 85


state 75

    (20) command -> SETPENCOLOR [ value value . value ]
    (31) value -> . NUM
    (32) value -> . VARUSE
    (33) value -> . VARUSE OPERATOR NUM
    (34) value -> . NUM OPERATOR VARUSE
    (35) value -> . NUM OPERATOR NUM
    (36) value -> . VARUSE OPERATOR VARUSE

    NUM             shift and go to state 30
    VARUSE          shift and go to state 31

    value                          shift and go to state 86

state 76

    (22) command -> IF condition [ program . ]
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    ]               shift and go to state 87
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 77

    (40) condition -> value LOGIC value .

    [               reduce using rule 40 (condition -> value LOGIC value .)
    ]               reduce using rule 40 (condition -> value LOGIC value .)


state 78

    (23) command -> IFELSE condition [ program . ] [ program ]
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    ]               shift and go to state 88
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 79

    (24) command -> REPEAT value [ program . ]
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    ]               shift and go to state 89
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 80

    (25) command -> WHILE [ condition ] . [ program ]

    [               shift and go to state 90


state 81

    (26) command -> WHILE condition [ program . ]
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    ]               shift and go to state 91
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 82

    (27) command -> TO NAMETO program END .

    FORWARD         reduce using rule 27 (command -> TO NAMETO program END .)
    FD              reduce using rule 27 (command -> TO NAMETO program END .)
    BACK            reduce using rule 27 (command -> TO NAMETO program END .)
    BK              reduce using rule 27 (command -> TO NAMETO program END .)
    LT              reduce using rule 27 (command -> TO NAMETO program END .)
    LEFT            reduce using rule 27 (command -> TO NAMETO program END .)
    RT              reduce using rule 27 (command -> TO NAMETO program END .)
    RIGHT           reduce using rule 27 (command -> TO NAMETO program END .)
    SETPOS          reduce using rule 27 (command -> TO NAMETO program END .)
    SETXY           reduce using rule 27 (command -> TO NAMETO program END .)
    SETX            reduce using rule 27 (command -> TO NAMETO program END .)
    SETY            reduce using rule 27 (command -> TO NAMETO program END .)
    HOME            reduce using rule 27 (command -> TO NAMETO program END .)
    PD              reduce using rule 27 (command -> TO NAMETO program END .)
    PENDOWN         reduce using rule 27 (command -> TO NAMETO program END .)
    PU              reduce using rule 27 (command -> TO NAMETO program END .)
    PENUP           reduce using rule 27 (command -> TO NAMETO program END .)
    SETPENCOLOR     reduce using rule 27 (command -> TO NAMETO program END .)
    MAKE            reduce using rule 27 (command -> TO NAMETO program END .)
    IF              reduce using rule 27 (command -> TO NAMETO program END .)
    IFELSE          reduce using rule 27 (command -> TO NAMETO program END .)
    REPEAT          reduce using rule 27 (command -> TO NAMETO program END .)
    WHILE           reduce using rule 27 (command -> TO NAMETO program END .)
    TO              reduce using rule 27 (command -> TO NAMETO program END .)
    NAMETO          reduce using rule 27 (command -> TO NAMETO program END .)
    $end            reduce using rule 27 (command -> TO NAMETO program END .)
    END             reduce using rule 27 (command -> TO NAMETO program END .)
    ]               reduce using rule 27 (command -> TO NAMETO program END .)


state 83

    (28) command -> TO NAMETO vars program . END
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    END             shift and go to state 92
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 84

    (42) vars -> vars VARUSE .

    VARUSE          reduce using rule 42 (vars -> vars VARUSE .)
    FORWARD         reduce using rule 42 (vars -> vars VARUSE .)
    FD              reduce using rule 42 (vars -> vars VARUSE .)
    BACK            reduce using rule 42 (vars -> vars VARUSE .)
    BK              reduce using rule 42 (vars -> vars VARUSE .)
    LT              reduce using rule 42 (vars -> vars VARUSE .)
    LEFT            reduce using rule 42 (vars -> vars VARUSE .)
    RT              reduce using rule 42 (vars -> vars VARUSE .)
    RIGHT           reduce using rule 42 (vars -> vars VARUSE .)
    SETPOS          reduce using rule 42 (vars -> vars VARUSE .)
    SETXY           reduce using rule 42 (vars -> vars VARUSE .)
    SETX            reduce using rule 42 (vars -> vars VARUSE .)
    SETY            reduce using rule 42 (vars -> vars VARUSE .)
    HOME            reduce using rule 42 (vars -> vars VARUSE .)
    PD              reduce using rule 42 (vars -> vars VARUSE .)
    PENDOWN         reduce using rule 42 (vars -> vars VARUSE .)
    PU              reduce using rule 42 (vars -> vars VARUSE .)
    PENUP           reduce using rule 42 (vars -> vars VARUSE .)
    SETPENCOLOR     reduce using rule 42 (vars -> vars VARUSE .)
    MAKE            reduce using rule 42 (vars -> vars VARUSE .)
    IF              reduce using rule 42 (vars -> vars VARUSE .)
    IFELSE          reduce using rule 42 (vars -> vars VARUSE .)
    REPEAT          reduce using rule 42 (vars -> vars VARUSE .)
    WHILE           reduce using rule 42 (vars -> vars VARUSE .)
    TO              reduce using rule 42 (vars -> vars VARUSE .)
    NAMETO          reduce using rule 42 (vars -> vars VARUSE .)


state 85

    (11) command -> SETPOS [ value value ] .

    FORWARD         reduce using rule 11 (command -> SETPOS [ value value ] .)
    FD              reduce using rule 11 (command -> SETPOS [ value value ] .)
    BACK            reduce using rule 11 (command -> SETPOS [ value value ] .)
    BK              reduce using rule 11 (command -> SETPOS [ value value ] .)
    LT              reduce using rule 11 (command -> SETPOS [ value value ] .)
    LEFT            reduce using rule 11 (command -> SETPOS [ value value ] .)
    RT              reduce using rule 11 (command -> SETPOS [ value value ] .)
    RIGHT           reduce using rule 11 (command -> SETPOS [ value value ] .)
    SETPOS          reduce using rule 11 (command -> SETPOS [ value value ] .)
    SETXY           reduce using rule 11 (command -> SETPOS [ value value ] .)
    SETX            reduce using rule 11 (command -> SETPOS [ value value ] .)
    SETY            reduce using rule 11 (command -> SETPOS [ value value ] .)
    HOME            reduce using rule 11 (command -> SETPOS [ value value ] .)
    PD              reduce using rule 11 (command -> SETPOS [ value value ] .)
    PENDOWN         reduce using rule 11 (command -> SETPOS [ value value ] .)
    PU              reduce using rule 11 (command -> SETPOS [ value value ] .)
    PENUP           reduce using rule 11 (command -> SETPOS [ value value ] .)
    SETPENCOLOR     reduce using rule 11 (command -> SETPOS [ value value ] .)
    MAKE            reduce using rule 11 (command -> SETPOS [ value value ] .)
    IF              reduce using rule 11 (command -> SETPOS [ value value ] .)
    IFELSE          reduce using rule 11 (command -> SETPOS [ value value ] .)
    REPEAT          reduce using rule 11 (command -> SETPOS [ value value ] .)
    WHILE           reduce using rule 11 (command -> SETPOS [ value value ] .)
    TO              reduce using rule 11 (command -> SETPOS [ value value ] .)
    NAMETO          reduce using rule 11 (command -> SETPOS [ value value ] .)
    $end            reduce using rule 11 (command -> SETPOS [ value value ] .)
    END             reduce using rule 11 (command -> SETPOS [ value value ] .)
    ]               reduce using rule 11 (command -> SETPOS [ value value ] .)


state 86

    (20) command -> SETPENCOLOR [ value value value . ]

    ]               shift and go to state 93


state 87

    (22) command -> IF condition [ program ] .

    FORWARD         reduce using rule 22 (command -> IF condition [ program ] .)
    FD              reduce using rule 22 (command -> IF condition [ program ] .)
    BACK            reduce using rule 22 (command -> IF condition [ program ] .)
    BK              reduce using rule 22 (command -> IF condition [ program ] .)
    LT              reduce using rule 22 (command -> IF condition [ program ] .)
    LEFT            reduce using rule 22 (command -> IF condition [ program ] .)
    RT              reduce using rule 22 (command -> IF condition [ program ] .)
    RIGHT           reduce using rule 22 (command -> IF condition [ program ] .)
    SETPOS          reduce using rule 22 (command -> IF condition [ program ] .)
    SETXY           reduce using rule 22 (command -> IF condition [ program ] .)
    SETX            reduce using rule 22 (command -> IF condition [ program ] .)
    SETY            reduce using rule 22 (command -> IF condition [ program ] .)
    HOME            reduce using rule 22 (command -> IF condition [ program ] .)
    PD              reduce using rule 22 (command -> IF condition [ program ] .)
    PENDOWN         reduce using rule 22 (command -> IF condition [ program ] .)
    PU              reduce using rule 22 (command -> IF condition [ program ] .)
    PENUP           reduce using rule 22 (command -> IF condition [ program ] .)
    SETPENCOLOR     reduce using rule 22 (command -> IF condition [ program ] .)
    MAKE            reduce using rule 22 (command -> IF condition [ program ] .)
    IF              reduce using rule 22 (command -> IF condition [ program ] .)
    IFELSE          reduce using rule 22 (command -> IF condition [ program ] .)
    REPEAT          reduce using rule 22 (command -> IF condition [ program ] .)
    WHILE           reduce using rule 22 (command -> IF condition [ program ] .)
    TO              reduce using rule 22 (command -> IF condition [ program ] .)
    NAMETO          reduce using rule 22 (command -> IF condition [ program ] .)
    $end            reduce using rule 22 (command -> IF condition [ program ] .)
    END             reduce using rule 22 (command -> IF condition [ program ] .)
    ]               reduce using rule 22 (command -> IF condition [ program ] .)


state 88

    (23) command -> IFELSE condition [ program ] . [ program ]

    [               shift and go to state 94


state 89

    (24) command -> REPEAT value [ program ] .

    FORWARD         reduce using rule 24 (command -> REPEAT value [ program ] .)
    FD              reduce using rule 24 (command -> REPEAT value [ program ] .)
    BACK            reduce using rule 24 (command -> REPEAT value [ program ] .)
    BK              reduce using rule 24 (command -> REPEAT value [ program ] .)
    LT              reduce using rule 24 (command -> REPEAT value [ program ] .)
    LEFT            reduce using rule 24 (command -> REPEAT value [ program ] .)
    RT              reduce using rule 24 (command -> REPEAT value [ program ] .)
    RIGHT           reduce using rule 24 (command -> REPEAT value [ program ] .)
    SETPOS          reduce using rule 24 (command -> REPEAT value [ program ] .)
    SETXY           reduce using rule 24 (command -> REPEAT value [ program ] .)
    SETX            reduce using rule 24 (command -> REPEAT value [ program ] .)
    SETY            reduce using rule 24 (command -> REPEAT value [ program ] .)
    HOME            reduce using rule 24 (command -> REPEAT value [ program ] .)
    PD              reduce using rule 24 (command -> REPEAT value [ program ] .)
    PENDOWN         reduce using rule 24 (command -> REPEAT value [ program ] .)
    PU              reduce using rule 24 (command -> REPEAT value [ program ] .)
    PENUP           reduce using rule 24 (command -> REPEAT value [ program ] .)
    SETPENCOLOR     reduce using rule 24 (command -> REPEAT value [ program ] .)
    MAKE            reduce using rule 24 (command -> REPEAT value [ program ] .)
    IF              reduce using rule 24 (command -> REPEAT value [ program ] .)
    IFELSE          reduce using rule 24 (command -> REPEAT value [ program ] .)
    REPEAT          reduce using rule 24 (command -> REPEAT value [ program ] .)
    WHILE           reduce using rule 24 (command -> REPEAT value [ program ] .)
    TO              reduce using rule 24 (command -> REPEAT value [ program ] .)
    NAMETO          reduce using rule 24 (command -> REPEAT value [ program ] .)
    $end            reduce using rule 24 (command -> REPEAT value [ program ] .)
    END             reduce using rule 24 (command -> REPEAT value [ program ] .)
    ]               reduce using rule 24 (command -> REPEAT value [ program ] .)


state 90

    (25) command -> WHILE [ condition ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 95
    command                        shift and go to state 2

state 91

    (26) command -> WHILE condition [ program ] .

    FORWARD         reduce using rule 26 (command -> WHILE condition [ program ] .)
    FD              reduce using rule 26 (command -> WHILE condition [ program ] .)
    BACK            reduce using rule 26 (command -> WHILE condition [ program ] .)
    BK              reduce using rule 26 (command -> WHILE condition [ program ] .)
    LT              reduce using rule 26 (command -> WHILE condition [ program ] .)
    LEFT            reduce using rule 26 (command -> WHILE condition [ program ] .)
    RT              reduce using rule 26 (command -> WHILE condition [ program ] .)
    RIGHT           reduce using rule 26 (command -> WHILE condition [ program ] .)
    SETPOS          reduce using rule 26 (command -> WHILE condition [ program ] .)
    SETXY           reduce using rule 26 (command -> WHILE condition [ program ] .)
    SETX            reduce using rule 26 (command -> WHILE condition [ program ] .)
    SETY            reduce using rule 26 (command -> WHILE condition [ program ] .)
    HOME            reduce using rule 26 (command -> WHILE condition [ program ] .)
    PD              reduce using rule 26 (command -> WHILE condition [ program ] .)
    PENDOWN         reduce using rule 26 (command -> WHILE condition [ program ] .)
    PU              reduce using rule 26 (command -> WHILE condition [ program ] .)
    PENUP           reduce using rule 26 (command -> WHILE condition [ program ] .)
    SETPENCOLOR     reduce using rule 26 (command -> WHILE condition [ program ] .)
    MAKE            reduce using rule 26 (command -> WHILE condition [ program ] .)
    IF              reduce using rule 26 (command -> WHILE condition [ program ] .)
    IFELSE          reduce using rule 26 (command -> WHILE condition [ program ] .)
    REPEAT          reduce using rule 26 (command -> WHILE condition [ program ] .)
    WHILE           reduce using rule 26 (command -> WHILE condition [ program ] .)
    TO              reduce using rule 26 (command -> WHILE condition [ program ] .)
    NAMETO          reduce using rule 26 (command -> WHILE condition [ program ] .)
    $end            reduce using rule 26 (command -> WHILE condition [ program ] .)
    END             reduce using rule 26 (command -> WHILE condition [ program ] .)
    ]               reduce using rule 26 (command -> WHILE condition [ program ] .)


state 92

    (28) command -> TO NAMETO vars program END .

    FORWARD         reduce using rule 28 (command -> TO NAMETO vars program END .)
    FD              reduce using rule 28 (command -> TO NAMETO vars program END .)
    BACK            reduce using rule 28 (command -> TO NAMETO vars program END .)
    BK              reduce using rule 28 (command -> TO NAMETO vars program END .)
    LT              reduce using rule 28 (command -> TO NAMETO vars program END .)
    LEFT            reduce using rule 28 (command -> TO NAMETO vars program END .)
    RT              reduce using rule 28 (command -> TO NAMETO vars program END .)
    RIGHT           reduce using rule 28 (command -> TO NAMETO vars program END .)
    SETPOS          reduce using rule 28 (command -> TO NAMETO vars program END .)
    SETXY           reduce using rule 28 (command -> TO NAMETO vars program END .)
    SETX            reduce using rule 28 (command -> TO NAMETO vars program END .)
    SETY            reduce using rule 28 (command -> TO NAMETO vars program END .)
    HOME            reduce using rule 28 (command -> TO NAMETO vars program END .)
    PD              reduce using rule 28 (command -> TO NAMETO vars program END .)
    PENDOWN         reduce using rule 28 (command -> TO NAMETO vars program END .)
    PU              reduce using rule 28 (command -> TO NAMETO vars program END .)
    PENUP           reduce using rule 28 (command -> TO NAMETO vars program END .)
    SETPENCOLOR     reduce using rule 28 (command -> TO NAMETO vars program END .)
    MAKE            reduce using rule 28 (command -> TO NAMETO vars program END .)
    IF              reduce using rule 28 (command -> TO NAMETO vars program END .)
    IFELSE          reduce using rule 28 (command -> TO NAMETO vars program END .)
    REPEAT          reduce using rule 28 (command -> TO NAMETO vars program END .)
    WHILE           reduce using rule 28 (command -> TO NAMETO vars program END .)
    TO              reduce using rule 28 (command -> TO NAMETO vars program END .)
    NAMETO          reduce using rule 28 (command -> TO NAMETO vars program END .)
    $end            reduce using rule 28 (command -> TO NAMETO vars program END .)
    END             reduce using rule 28 (command -> TO NAMETO vars program END .)
    ]               reduce using rule 28 (command -> TO NAMETO vars program END .)


state 93

    (20) command -> SETPENCOLOR [ value value value ] .

    FORWARD         reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    FD              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    BACK            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    BK              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    LT              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    LEFT            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    RT              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    RIGHT           reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    SETPOS          reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    SETXY           reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    SETX            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    SETY            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    HOME            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    PD              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    PENDOWN         reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    PU              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    PENUP           reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    SETPENCOLOR     reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    MAKE            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    IF              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    IFELSE          reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    REPEAT          reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    WHILE           reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    TO              reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    NAMETO          reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    $end            reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    END             reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)
    ]               reduce using rule 20 (command -> SETPENCOLOR [ value value value ] .)


state 94

    (23) command -> IFELSE condition [ program ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    program                        shift and go to state 96
    command                        shift and go to state 2

state 95

    (25) command -> WHILE [ condition ] [ program . ]
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    ]               shift and go to state 97
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 96

    (23) command -> IFELSE condition [ program ] [ program . ]
    (2) program -> program . command
    (3) command -> . FORWARD value
    (4) command -> . FD value
    (5) command -> . BACK value
    (6) command -> . BK value
    (7) command -> . LT value
    (8) command -> . LEFT value
    (9) command -> . RT value
    (10) command -> . RIGHT value
    (11) command -> . SETPOS [ value value ]
    (12) command -> . SETXY value value
    (13) command -> . SETX value
    (14) command -> . SETY value
    (15) command -> . HOME
    (16) command -> . PD
    (17) command -> . PENDOWN
    (18) command -> . PU
    (19) command -> . PENUP
    (20) command -> . SETPENCOLOR [ value value value ]
    (21) command -> . MAKE VARNAME value
    (22) command -> . IF condition [ program ]
    (23) command -> . IFELSE condition [ program ] [ program ]
    (24) command -> . REPEAT value [ program ]
    (25) command -> . WHILE [ condition ] [ program ]
    (26) command -> . WHILE condition [ program ]
    (27) command -> . TO NAMETO program END
    (28) command -> . TO NAMETO vars program END
    (29) command -> . NAMETO
    (30) command -> . NAMETO values

    ]               shift and go to state 98
    FORWARD         shift and go to state 3
    FD              shift and go to state 4
    BACK            shift and go to state 5
    BK              shift and go to state 6
    LT              shift and go to state 7
    LEFT            shift and go to state 8
    RT              shift and go to state 9
    RIGHT           shift and go to state 10
    SETPOS          shift and go to state 11
    SETXY           shift and go to state 12
    SETX            shift and go to state 13
    SETY            shift and go to state 14
    HOME            shift and go to state 15
    PD              shift and go to state 16
    PENDOWN         shift and go to state 17
    PU              shift and go to state 18
    PENUP           shift and go to state 19
    SETPENCOLOR     shift and go to state 20
    MAKE            shift and go to state 21
    IF              shift and go to state 22
    IFELSE          shift and go to state 23
    REPEAT          shift and go to state 24
    WHILE           shift and go to state 25
    TO              shift and go to state 26
    NAMETO          shift and go to state 27

    command                        shift and go to state 28

state 97

    (25) command -> WHILE [ condition ] [ program ] .

    FORWARD         reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    FD              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    BACK            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    BK              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    LT              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    LEFT            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    RT              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    RIGHT           reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    SETPOS          reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    SETXY           reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    SETX            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    SETY            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    HOME            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    PD              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    PENDOWN         reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    PU              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    PENUP           reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    SETPENCOLOR     reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    MAKE            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    IF              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    IFELSE          reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    REPEAT          reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    WHILE           reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    TO              reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    NAMETO          reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    $end            reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    END             reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)
    ]               reduce using rule 25 (command -> WHILE [ condition ] [ program ] .)


state 98

    (23) command -> IFELSE condition [ program ] [ program ] .

    FORWARD         reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    FD              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    BACK            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    BK              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    LT              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    LEFT            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    RT              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    RIGHT           reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    SETPOS          reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    SETXY           reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    SETX            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    SETY            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    HOME            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    PD              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    PENDOWN         reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    PU              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    PENUP           reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    SETPENCOLOR     reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    MAKE            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    IF              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    IFELSE          reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    REPEAT          reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    WHILE           reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    TO              reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    NAMETO          reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    $end            reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    END             reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)
    ]               reduce using rule 23 (command -> IFELSE condition [ program ] [ program ] .)

